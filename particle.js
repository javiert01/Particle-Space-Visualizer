class Particle extends p5.Vector {
  constructor(x, y, drawFigure, figure, startToFade, newLifetime) {
    super(x, y)
    this.mass = 1
    if (drawFigure) {
      this.vel = this.getFigureVector(figure)
    } else {
      this.vel = p5.Vector.random2D()
      this.vel.mult(6.5)
    }
    this.startToFade = startToFade
    this.newLifetime = newLifetime
    this.acc = createVector(0, 0)
    this.r = random(1, 3)
    this.color = color(random(0, 255), 120, 210)
    this.lifetime = 300
  }

  finished() {
    return this.lifetime < 0
  }

  applyForce(force) {
    this.acc.add(force)
  }

  attract(particle) {
    let force = p5.Vector.sub(this, particle)
    let distanceSq = constrain(force.magSq(), 100, 1000)
    let G = 5
    let strength = (G * (this.mass * particle.mass)) / distanceSq
    force.setMag(strength)
    particle.applyForce(force)
  }

  update() {
    this.vel.add(this.acc)
    this.add(this.vel)
    this.acc.mult(0)
    this.lifetime -= 5
  }

  show() {
    /* tint(this.color, this.lifetime)
      imageMode(CENTER);
      image(img, this.x, this.y, this.r * 2, this.r * 2); */
    noStroke()
    this.startToFade
      ? fill(color(random(0, 255), 120, 210, this.newLifetime))
      : fill(color(random(0, 255), 120, 210))
    ellipse(this.x, this.y, this.r * 2)
  }

  getFigureVector(figureName) {
    let t = random(-TWO_PI, 0)
    switch (figureName) {
      case 'Heart':
        let a = random(0, TWO_PI)
        let rFigure = 0.08
        let xHeart = rFigure * 16 * Math.pow(sin(a), 3)
        let yHeart =
          -rFigure *
          (13 * cos(a) - 5 * cos(2 * a) - 2 * cos(3 * a) - cos(4 * a))
        return createVector(xHeart, yHeart)
      case 'Cat':
        let rFigureCat = -0.004
        let xCat =
          (-(721 * sin(t)) / 4 +
            (196 / 3) * sin(2 * t) -
            (86 / 3) * sin(3 * t) -
            (131 / 2) * sin(4 * t) +
            (477 / 14) * sin(5 * t) +
            27 * sin(6 * t) -
            (29 / 2) * sin(7 * t) +
            (68 / 5) * sin(8 * t) +
            (1 / 10) * sin(9 * t) +
            (23 / 4) * sin(10 * t) -
            (19 / 2) * sin(12 * t) -
            (85 / 21) * sin(13 * t) +
            (2 / 3) * sin(14 * t) +
            (27 / 5) * sin(15 * t) +
            (7 / 4) * sin(16 * t) +
            (17 / 9) * sin(17 * t) -
            4 * sin(18 * t) -
            (1 / 2) * sin(19 * t) +
            (1 / 6) * sin(20 * t) +
            (6 / 7) * sin(21 * t) -
            (1 / 8) * sin(22 * t) +
            (1 / 3) * sin(23 * t) +
            (3 / 2) * sin(24 * t) +
            (13 / 5) * sin(25 * t) +
            sin(26 * t) -
            2 * sin(27 * t) +
            (3 / 5) * sin(28 * t) -
            (1 / 5) * sin(29 * t) +
            (1 / 5) * sin(30 * t) +
            (2337 * cos(t)) / 8 -
            (43 / 5) * cos(2 * t) +
            (322 / 5) * cos(3 * t) -
            (117 / 5) * cos(4 * t) -
            (26 / 5) * cos(5 * t) -
            (23 / 3) * cos(6 * t) +
            (143 / 4) * cos(7 * t) -
            (11 / 4) * cos(8 * t) -
            (31 / 3) * cos(9 * t) -
            (13 / 4) * cos(10 * t) -
            (9 / 2) * cos(11 * t) +
            (41 / 20) * cos(12 * t) +
            8 * cos(13 * t) +
            (2 / 3) * cos(14 * t) +
            6 * cos(15 * t) +
            (17 / 4) * cos(16 * t) -
            (3 / 2) * cos(17 * t) -
            (29 / 10) * cos(18 * t) +
            (11 / 6) * cos(19 * t) +
            (12 / 5) * cos(20 * t) +
            (3 / 2) * cos(21 * t) +
            (11 / 12) * cos(22 * t) -
            (4 / 5) * cos(23 * t) +
            cos(24 * t) +
            (17 / 8) * cos(25 * t) -
            (7 / 2) * cos(26 * t) -
            (5 / 6) * cos(27 * t) -
            (11 / 10) * cos(28 * t) +
            (1 / 2) * cos(29 * t) -
            (1 / 5) * cos(30 * t)) *
          rFigureCat
        let yCat =
          (-(637 * sin(t)) / 2 -
            (188 / 5) * sin(2 * t) -
            (11 / 7) * sin(3 * t) -
            (12 / 5) * sin(4 * t) +
            (11 / 3) * sin(5 * t) -
            (37 / 4) * sin(6 * t) +
            (8 / 3) * sin(7 * t) +
            (65 / 6) * sin(8 * t) -
            (32 / 5) * sin(9 * t) -
            (41 / 4) * sin(10 * t) -
            (38 / 3) * sin(11 * t) -
            (47 / 8) * sin(12 * t) +
            (5 / 4) * sin(13 * t) -
            (41 / 7) * sin(14 * t) -
            (7 / 3) * sin(15 * t) -
            (13 / 7) * sin(16 * t) +
            (17 / 4) * sin(17 * t) -
            (9 / 4) * sin(18 * t) +
            (8 / 9) * sin(19 * t) +
            (3 / 5) * sin(20 * t) -
            (2 / 5) * sin(21 * t) +
            (4 / 3) * sin(22 * t) +
            (1 / 3) * sin(23 * t) +
            (3 / 5) * sin(24 * t) -
            (3 / 5) * sin(25 * t) +
            (6 / 5) * sin(26 * t) -
            (1 / 5) * sin(27 * t) +
            (10 / 9) * sin(28 * t) +
            (1 / 3) * sin(29 * t) -
            (3 / 4) * sin(30 * t) -
            (125 * cos(t)) / 2 -
            (521 / 9) * cos(2 * t) -
            (359 / 3) * cos(3 * t) +
            (47 / 3) * cos(4 * t) -
            (33 / 2) * cos(5 * t) -
            (5 / 4) * cos(6 * t) +
            (31 / 8) * cos(7 * t) +
            (9 / 10) * cos(8 * t) -
            (119 / 4) * cos(9 * t) -
            (17 / 2) * cos(10 * t) +
            (22 / 3) * cos(11 * t) +
            (15 / 4) * cos(12 * t) -
            (5 / 2) * cos(13 * t) +
            (19 / 6) * cos(14 * t) +
            (7 / 4) * cos(15 * t) +
            (31 / 4) * cos(16 * t) -
            cos(17 * t) +
            (11 / 10) * cos(18 * t) -
            (2 / 3) * cos(19 * t) +
            (13 / 3) * cos(20 * t) -
            (5 / 4) * cos(21 * t) +
            (2 / 3) * cos(22 * t) +
            (1 / 4) * cos(23 * t) +
            (5 / 6) * cos(24 * t) +
            (3 / 4) * cos(26 * t) -
            (1 / 2) * cos(27 * t) -
            (1 / 10) * cos(28 * t) -
            (1 / 3) * cos(29 * t) -
            (1 / 19) * cos(30 * t)) *
          rFigureCat
        return createVector(xCat, yCat)
      case 'Dolphin':
        let rFigureDolphin = -0.002
        let xDolphin =
          rFigureDolphin *
          ((4 / 23) * sin(62 / 33 - 58 * t) +
            (8 / 11) * sin(10 / 9 - 56 * t) +
            (17 / 24) * sin(38 / 35 - 55 * t) +
            (30 / 89) * sin(81 / 23 - 54 * t) +
            (3 / 17) * sin(53 / 18 - 53 * t) +
            (21 / 38) * sin(29 / 19 - 52 * t) +
            (11 / 35) * sin(103 / 40 - 51 * t) +
            (7 / 16) * sin(79 / 18 - 50 * t) +
            (4 / 15) * sin(270 / 77 - 49 * t) +
            (19 / 35) * sin(59 / 27 - 48 * t) +
            (37 / 43) * sin(71 / 17 - 47 * t) +
            sin(18 / 43 - 45 * t) +
            (21 / 26) * sin(37 / 26 - 44 * t) +
            (27 / 19) * sin(111 / 32 - 42 * t) +
            (8 / 39) * sin(13 / 25 - 41 * t) +
            (23 / 30) * sin(27 / 8 - 40 * t) +
            (23 / 21) * sin(32 / 35 - 37 * t) +
            (18 / 37) * sin(91 / 31 - 36 * t) +
            (45 / 22) * sin(29 / 37 - 35 * t) +
            (56 / 45) * sin(11 / 8 - 33 * t) +
            (4 / 7) * sin(32 / 19 - 32 * t) +
            (54 / 23) * sin(74 / 29 - 31 * t) +
            (28 / 19) * sin(125 / 33 - 30 * t) +
            (19 / 9) * sin(73 / 27 - 29 * t) +
            (16 / 17) * sin(737 / 736 - 28 * t) +
            (52 / 33) * sin(130 / 29 - 27 * t) +
            (41 / 23) * sin(43 / 30 - 25 * t) +
            (29 / 20) * sin(67 / 26 - 24 * t) +
            (64 / 25) * sin(136 / 29 - 23 * t) +
            (162 / 37) * sin(59 / 34 - 21 * t) +
            (871 / 435) * sin(199 / 51 - 20 * t) +
            (61 / 42) * sin(58 / 17 - 19 * t) +
            (159 / 25) * sin(77 / 31 - 17 * t) +
            (241 / 15) * sin(94 / 31 - 13 * t) +
            (259 / 18) * sin(114 / 91 - 12 * t) +
            (356 / 57) * sin(23 / 25 - 11 * t) +
            (2283 / 137) * sin(23 / 25 - 10 * t) +
            (1267 / 45) * sin(139 / 42 - 9 * t) +
            (613 / 26) * sin(41 / 23 - 8 * t) +
            (189 / 16) * sin(122 / 47 - 6 * t) +
            (385 / 6) * sin(151 / 41 - 5 * t) +
            (2551 / 38) * sin(106 / 35 - 4 * t) +
            (1997 / 18) * sin(6 / 5 - 2 * t) +
            (43357 / 47) * sin(81 / 26 - t) -
            (4699 / 35) * sin(3 * t + 25 / 31) -
            (1029 / 34) * sin(7 * t + 20 / 21) -
            (250 / 17) * sin(14 * t + 7 / 40) -
            (140 / 17) * sin(15 * t + 14 / 25) -
            (194 / 29) * sin(16 * t + 29 / 44) -
            (277 / 52) * sin(18 * t + 37 / 53) -
            (94 / 41) * sin(22 * t + 33 / 31) -
            (57 / 28) * sin(26 * t + 44 / 45) -
            (128 / 61) * sin(34 * t + 11 / 14) -
            (111 / 95) * sin(38 * t + 55 / 37) -
            (85 / 71) * sin(39 * t + 4 / 45) -
            (25 / 29) * sin(43 * t + 129 / 103) -
            (7 / 37) * sin(46 * t + 9 / 20) -
            (17 / 32) * sin(57 * t + 11 / 28) -
            (5 / 16) * sin(59 * t + 32 / 39))
        let yDolphin =
          rFigureDolphin *
          ((5 / 11) * sin(163 / 37 - 59 * t) +
            (7 / 22) * sin(19 / 41 - 58 * t) +
            (30 / 41) * sin(1 - 57 * t) +
            (37 / 29) * sin(137 / 57 - 56 * t) +
            (5 / 7) * sin(17 / 6 - 55 * t) +
            (11 / 39) * sin(46 / 45 - 52 * t) +
            (25 / 28) * sin(116 / 83 - 51 * t) +
            (25 / 34) * sin(11 / 20 - 47 * t) +
            (8 / 27) * sin(81 / 41 - 46 * t) +
            (44 / 39) * sin(78 / 37 - 45 * t) +
            (11 / 25) * sin(107 / 37 - 44 * t) +
            (7 / 20) * sin(7 / 16 - 41 * t) +
            (30 / 31) * sin(19 / 5 - 40 * t) +
            (37 / 27) * sin(148 / 59 - 39 * t) +
            (44 / 39) * sin(17 / 27 - 38 * t) +
            (13 / 11) * sin(7 / 11 - 37 * t) +
            (28 / 33) * sin(119 / 39 - 36 * t) +
            (27 / 13) * sin(244 / 81 - 35 * t) +
            (13 / 23) * sin(113 / 27 - 34 * t) +
            (47 / 38) * sin(127 / 32 - 33 * t) +
            (155 / 59) * sin(173 / 45 - 29 * t) +
            (105 / 37) * sin(22 / 43 - 27 * t) +
            (106 / 27) * sin(23 / 37 - 26 * t) +
            (97 / 41) * sin(53 / 29 - 25 * t) +
            (83 / 45) * sin(109 / 31 - 24 * t) +
            (81 / 31) * sin(96 / 29 - 23 * t) +
            (56 / 37) * sin(29 / 10 - 22 * t) +
            (44 / 13) * sin(29 / 19 - 19 * t) +
            (18 / 5) * sin(34 / 31 - 18 * t) +
            (163 / 51) * sin(75 / 17 - 17 * t) +
            (152 / 31) * sin(61 / 18 - 16 * t) +
            (146 / 19) * sin(47 / 20 - 15 * t) +
            (353 / 35) * sin(55 / 48 - 14 * t) +
            (355 / 28) * sin(102 / 25 - 12 * t) +
            (1259 / 63) * sin(71 / 18 - 11 * t) +
            (17 / 35) * sin(125 / 52 - 10 * t) +
            (786 / 23) * sin(23 / 26 - 6 * t) +
            (2470 / 41) * sin(77 / 30 - 5 * t) +
            (2329 / 47) * sin(47 / 21 - 4 * t) +
            (2527 / 33) * sin(23 / 14 - 3 * t) +
            (9931 / 33) * sin(51 / 35 - 2 * t) -
            (11506 / 19) * sin(t + 56 / 67) -
            (2081 / 42) * sin(7 * t + 9 / 28) -
            (537 / 14) * sin(8 * t + 3 / 25) -
            (278 / 29) * sin(9 * t + 23 / 33) -
            (107 / 15) * sin(13 * t + 35 / 26) -
            (56 / 19) * sin(20 * t + 5 / 9) -
            (5 / 9) * sin(21 * t + 1 / 34) -
            (17 / 24) * sin(28 * t + 36 / 23) -
            (21 / 11) * sin(30 * t + 27 / 37) -
            (138 / 83) * sin(31 * t + 1 / 7) -
            (10 / 17) * sin(32 * t + 29 / 48) -
            (31 / 63) * sin(42 * t + 27 / 28) -
            (4 / 27) * sin(43 * t + 29 / 43) -
            (13 / 24) * sin(48 * t + 5 / 21) -
            (4 / 7) * sin(49 * t + 29 / 23) -
            (26 / 77) * sin(50 * t + 29 / 27) -
            (19 / 14) * sin(53 * t + 61 / 48) +
            (34 / 25) * sin(54 * t + 37 / 26))
        return createVector(xDolphin, yDolphin)
      case 'Dragonfly':
        let rDragonFly = -0.003
        let xDragonfly =
          rDragonFly *
          ((2 / 9) * sin(15 / 19 - 81 * t) +
            (4 / 11) * sin(75 / 22 - 79 * t) +
            (3 / 19) * sin(35 / 22 - 78 * t) +
            (1 / 18) * sin(20 / 37 - 76 * t) +
            (24 / 31) * sin(56 / 23 - 72 * t) +
            (11 / 25) * sin(63 / 32 - 71 * t) +
            (9 / 14) * sin(59 / 24 - 69 * t) +
            (5 / 33) * sin(91 / 31 - 68 * t) +
            (23 / 54) * sin(37 / 16 - 67 * t) +
            (3 / 16) * sin(65 / 14 - 64 * t) +
            (20 / 59) * sin(24 / 29 - 62 * t) +
            (35 / 104) * sin(128 / 51 - 61 * t) +
            (8 / 17) * sin(46 / 55 - 60 * t) +
            (10 / 31) * sin(157 / 48 - 58 * t) +
            (13 / 29) * sin(71 / 37 - 57 * t) +
            (9 / 32) * sin(59 / 30 - 56 * t) +
            (5 / 7) * sin(34 / 15 - 55 * t) +
            (35 / 58) * sin(5 / 19 - 54 * t) +
            (5 / 17) * sin(46 / 77 - 52 * t) +
            (18 / 43) * sin(18 / 13 - 51 * t) +
            (25 / 39) * sin(91 / 31 - 47 * t) +
            (9 / 14) * sin(23 / 7 - 46 * t) +
            (46 / 27) * sin(80 / 47 - 45 * t) +
            (19 / 14) * sin(14 / 39 - 44 * t) +
            (45 / 22) * sin(114 / 25 - 43 * t) +
            (53 / 44) * sin(95 / 33 - 42 * t) +
            (70 / 51) * sin(27 / 17 - 41 * t) +
            (37 / 110) * sin(23 / 17 - 40 * t) +
            (20 / 19) * sin(290 / 67 - 38 * t) +
            (73 / 74) * sin(28 / 11 - 37 * t) +
            (8 / 5) * sin(110 / 27 - 35 * t) +
            (17 / 25) * sin(65 / 32 - 34 * t) +
            (11 / 12) * sin(81 / 23 - 33 * t) +
            (39 / 23) * sin(56 / 33 - 31 * t) +
            (31 / 18) * sin(45 / 44 - 30 * t) +
            (131 / 31) * sin(22 / 17 - 29 * t) +
            (23 / 27) * sin(1 / 31 - 27 * t) +
            (77 / 34) * sin(129 / 32 - 26 * t) +
            (53 / 23) * sin(103 / 45 - 25 * t) +
            (63 / 29) * sin(7 / 6 - 24 * t) +
            (51 / 32) * sin(110 / 29 - 23 * t) +
            (157 / 44) * sin(31 / 7 - 21 * t) +
            (49 / 30) * sin(114 / 41 - 20 * t) +
            (166 / 41) * sin(31 / 44 - 19 * t) +
            (73 / 24) * sin(159 / 41 - 17 * t) +
            (12 / 11) * sin(53 / 23 - 16 * t) +
            (281 / 25) * sin(3 / 19 - 14 * t) +
            (695 / 43) * sin(62 / 21 - 11 * t) +
            (721 / 53) * sin(137 / 31 - 10 * t) +
            (919 / 43) * sin(69 / 25 - 9 * t) +
            (114 / 5) * sin(82 / 27 - 8 * t) +
            (725 / 16) * sin(85 / 57 - 7 * t) +
            (635 / 26) * sin(40 / 13 - 6 * t) +
            (794 / 41) * sin(19 / 31 - 4 * t) +
            (3202 / 39) * sin(108 / 41 - 3 * t) +
            (1527 / 37) * sin(16 / 5 - 2 * t) +
            (7714 / 27) * sin(47 / 20 - t) -
            (1111 / 45) * sin(5 * t + 19 / 26) -
            (322 / 19) * sin(12 * t + 37 / 24) -
            (41 / 13) * sin(13 * t + 19 / 15) -
            (98 / 25) * sin(15 * t + 1 / 30) -
            (76 / 13) * sin(18 * t + 15 / 17) -
            (23 / 15) * sin(22 * t + 43 / 31) -
            (125 / 36) * sin(28 * t + 15 / 32) -
            (13 / 19) * sin(32 * t + 29 / 27) -
            (46 / 55) * sin(36 * t + 20 / 39) -
            (28 / 47) * sin(39 * t + 13 / 9) -
            (16 / 23) * sin(48 * t + 47 / 36) -
            (7 / 32) * sin(49 * t + 9 / 7) -
            (25 / 21) * sin(50 * t + 1) -
            (12 / 13) * sin(53 * t + 63 / 44) -
            (19 / 35) * sin(59 * t + 49 / 55) -
            (5 / 21) * sin(63 * t + 29 / 31) -
            (4 / 23) * sin(65 * t + 53 / 38) -
            (19 / 27) * sin(66 * t + 5 / 23) -
            (29 / 51) * sin(70 * t + 11 / 10) -
            (5 / 16) * sin(73 * t + 40 / 33) -
            (19 / 32) * sin(74 * t + 26 / 61) -
            (13 / 28) * sin(75 * t + 7 / 5) -
            (5 / 36) * sin(77 * t + 36 / 23) -
            (7 / 38) * sin(80 * t + 28 / 29))
        let yDragonfly =
          rDragonFly *
          ((1 / 16) * sin(50 / 23 - 80 * t) +
            (4 / 47) * sin(34 / 33 - 79 * t) +
            (7 / 38) * sin(151 / 38 - 78 * t) +
            (3 / 10) * sin(55 / 19 - 77 * t) +
            (5 / 44) * sin(13 / 6 - 75 * t) +
            (3 / 22) * sin(58 / 25 - 74 * t) +
            (6 / 35) * sin(38 / 29 - 73 * t) +
            (7 / 39) * sin(54 / 13 - 71 * t) +
            (11 / 27) * sin(33 / 25 - 70 * t) +
            (23 / 33) * sin(71 / 39 - 68 * t) +
            (17 / 31) * sin(110 / 31 - 66 * t) +
            (4 / 31) * sin(27 / 28 - 65 * t) +
            (5 / 29) * sin(145 / 62 - 64 * t) +
            (7 / 38) * sin(139 / 33 - 63 * t) +
            (13 / 48) * sin(121 / 32 - 62 * t) +
            (9 / 31) * sin(111 / 28 - 61 * t) +
            (9 / 37) * sin(114 / 31 - 60 * t) +
            (6 / 13) * sin(43 / 49 - 59 * t) +
            (22 / 23) * sin(5 / 49 - 58 * t) +
            (3 / 7) * sin(35 / 11 - 57 * t) +
            (13 / 59) * sin(124 / 29 - 56 * t) +
            (6 / 13) * sin(116 / 93 - 55 * t) +
            (4 / 13) * sin(14 / 39 - 54 * t) +
            (10 / 19) * sin(70 / 19 - 53 * t) +
            (15 / 28) * sin(65 / 31 - 52 * t) +
            (13 / 21) * sin(25 / 12 - 50 * t) +
            (11 / 23) * sin(41 / 39 - 48 * t) +
            (12 / 37) * sin(82 / 31 - 46 * t) +
            (5 / 14) * sin(94 / 37 - 44 * t) +
            (35 / 26) * sin(1 / 18 - 43 * t) +
            (59 / 31) * sin(94 / 49 - 41 * t) +
            (31 / 13) * sin(97 / 26 - 39 * t) +
            (46 / 51) * sin(11 / 14 - 38 * t) +
            (31 / 42) * sin(112 / 25 - 37 * t) +
            (41 / 31) * sin(63 / 17 - 36 * t) +
            (32 / 29) * sin(59 / 48 - 35 * t) +
            (137 / 55) * sin(51 / 23 - 30 * t) +
            (29 / 30) * sin(71 / 17 - 29 * t) +
            (65 / 36) * sin(29 / 25 - 28 * t) +
            (43 / 37) * sin(254 / 61 - 27 * t) +
            (83 / 35) * sin(73 / 25 - 26 * t) +
            (257 / 79) * sin(38 / 39 - 25 * t) +
            (37 / 43) * sin(123 / 28 - 24 * t) +
            (111 / 19) * sin(17 / 5 - 23 * t) +
            (17 / 41) * sin(45 / 34 - 22 * t) +
            (428 / 143) * sin(1 / 18 - 21 * t) +
            (105 / 31) * sin(200 / 89 - 19 * t) +
            (128 / 19) * sin(33 / 8 - 17 * t) +
            (79 / 41) * sin(23 / 10 - 16 * t) +
            (211 / 24) * sin(5 / 41 - 15 * t) +
            (564 / 49) * sin(61 / 37 - 14 * t) +
            (152 / 43) * sin(2 / 13 - 13 * t) +
            (309 / 29) * sin(187 / 65 - 12 * t) +
            (191 / 28) * sin(16 / 27 - 11 * t) +
            (2287 / 176) * sin(8 / 47 - 10 * t) +
            (287 / 12) * sin(89 / 21 - 9 * t) +
            (1083 / 67) * sin(44 / 37 - 8 * t) +
            (425 / 16) * sin(109 / 28 - 7 * t) +
            (647 / 26) * sin(136 / 29 - 6 * t) +
            (1111 / 20) * sin(9 / 23 - 3 * t) +
            (3591 / 53) * sin(28 / 13 - 2 * t) +
            (9406 / 37) * sin(29 / 7 - t) -
            (2103 / 46) * sin(4 * t + 1 / 86) -
            (434 / 9) * sin(5 * t + 38 / 33) -
            (91 / 9) * sin(18 * t + 1 / 25) -
            (28 / 39) * sin(20 * t + 21 / 19) -
            (47 / 36) * sin(31 * t + 1 / 3) -
            (3 / 13) * sin(32 * t + 4 / 31) -
            (81 / 34) * sin(33 * t + 39 / 25) -
            (35 / 44) * sin(34 * t + 8 / 37) -
            (63 / 79) * sin(40 * t + 5 / 42) -
            (44 / 41) * sin(42 * t + 39 / 31) -
            (31 / 39) * sin(45 * t + 5 / 14) -
            (19 / 40) * sin(47 * t + 36 / 31) -
            (19 / 18) * sin(49 * t + 17 / 12) -
            (1 / 38) * sin(51 * t + 8 / 23) -
            (1 / 4) * sin(67 * t + 17 / 25) -
            (22 / 51) * sin(69 * t + 54 / 41) -
            (33 / 74) * sin(72 * t + 13 / 24) -
            (3 / 7) * sin(76 * t + 15 / 17) -
            (3 / 29) * sin(81 * t + 8 / 23))
        return createVector(xDragonfly, yDragonfly)
      default:
        return p5.Vector.random2D()
    }
  }
}
